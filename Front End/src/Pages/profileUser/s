import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Camera, Edit, Phone, Mail } from "lucide-react";
import { fetchUser } from "../../Redux/users/userThunk";

export default function UserProfile() {
  const dispatch = useDispatch();
  const { user, loading, error, isAuthenticated } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(fetchUser());
  }, [dispatch]);

  // التحكم في الحقول التي يتم تعديلها
  const [isEditing, setIsEditing] = useState({
    firstName: false,
    lastName: false,
    email: false,
    phoneNumber: false
  });

  // لتحديث القيم بعد التعديل
  const handleUpdate = (field, value) => {
    setUser((prev) => ({ ...prev, [field]: value }));
    setIsEditing((prev) => ({ ...prev, [field]: false }));
  };

  // عرض البيانات
  return (
    <div className="min-h-screen bg-prim-dark p-6">
      <div className="max-w-7xl mx-auto">
        <div className="bg-prime-white rounded-2xl shadow-xl p-8">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-black">My Profile</h1>
          </div>

          <div className="flex flex-col lg:flex-row gap-8">
            {/* User Info Section */}
            <div className="lg:w-1/3">
              <div className="bg-prim-dark rounded-xl p-6">
                <div className="relative w-32 h-32 mx-auto">
                  <img
                    src={user.profilePicture || "/default-profile.png"}  // عرض الصورة
                    alt={`${user.firstName} ${user.lastName}`}
                    className="rounded-full w-full h-full object-cover border-4 border-prim-button"
                  />
                  <div className="absolute bottom-0 right-0 bg-prim-button rounded-full p-2 cursor-pointer hover:bg-hover-button transition-colors duration-300">
                    <Camera className="text-prime-white" size={20} />
                  </div>
                </div>

                <div className="mt-6 space-y-4">
                  {/* First Name */}
                  <div className="flex items-center justify-between bg-prime-white rounded-lg p-3">
                    {isEditing.firstName ? (
                      <input
                        type="text"
                        value={user.firstName}
                        onChange={(e) => handleUpdate('firstName', e.target.value)}
                        className="bg-transparent text-xl font-bold text-black focus:outline-none w-full"
                      />
                    ) : (
                      <>
                        <span className="text-xl font-bold text-black">{user.firstName}</span>
                        <Edit 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          size={18}
                          onClick={() => setIsEditing({ ...isEditing, firstName: true })}
                        />
                      </>
                    )}
                  </div>

                  {/* Last Name */}
                  <div className="flex items-center justify-between bg-prime-white rounded-lg p-3">
                    {isEditing.lastName ? (
                      <input
                        type="text"
                        value={user.lastName}
                        onChange={(e) => handleUpdate('lastName', e.target.value)}
                        className="bg-transparent text-xl font-bold text-black focus:outline-none w-full"
                      />
                    ) : (
                      <>
                        <span className="text-xl font-bold text-black">{user.lastName}</span>
                        <Edit 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          size={18}
                          onClick={() => setIsEditing({ ...isEditing, lastName: true })}
                        />
                      </>
                    )}
                  </div>

                  {/* Email */}
                  <div className="flex items-center justify-between bg-prime-white rounded-lg p-3">
                    <div className="flex items-center">
                      <Mail className="text-prim-button mr-2" size={18} />
                      {isEditing.email ? (
                        <input
                          type="email"
                          value={user.email}
                          onChange={(e) => handleUpdate('email', e.target.value)}
                          className="bg-transparent text-black focus:outline-none w-full"
                        />
                      ) : (
                        <span className="text-black">{user.email}</span>
                      )}
                    </div>
                    <div>
                      {isEditing.email ? (
                        <button 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          onClick={() => handleUpdate('email', user.email)}>
                          Save
                        </button>
                      ) : (
                        <Edit 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          size={18}
                          onClick={() => setIsEditing({ ...isEditing, email: true })}
                        />
                      )}
                    </div>
                  </div>

                  {/* Phone Number */}
                  <div className="flex items-center justify-between bg-prime-white rounded-lg p-3">
                    <div className="flex items-center">
                      <Phone className="text-prim-button mr-2" size={18} />
                      {isEditing.phoneNumber ? (
                        <input
                          type="tel"
                          value={user.phoneNumber}
                          onChange={(e) => handleUpdate('phoneNumber', e.target.value)}
                          className="bg-transparent text-black focus:outline-none w-full"
                        />
                      ) : (
                        <span className="text-black">{user.phoneNumber || 'Not Provided'}</span>
                      )}
                    </div>
                    <div>
                      {isEditing.phoneNumber ? (
                        <button 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          onClick={() => handleUpdate('phoneNumber', user.phoneNumber)}>
                          Save
                        </button>
                      ) : (
                        <Edit 
                          className="cursor-pointer text-prim-button hover:text-hover-button transition-colors duration-300" 
                          size={18}
                          onClick={() => setIsEditing({ ...isEditing, phoneNumber: true })}
                        />
                      )}
                    </div>
                  </div>

                  {/* About Me */}
                  <div className="flex items-center justify-between bg-prime-white rounded-lg p-3">
                    <div className="flex items-center">
                      <span className="text-black">{user.aboutMe || 'No bio available'}</span>
                    </div>
                  </div>

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
