// import React, { useState, useEffect } from "react";
// import { Calendar as CalendarIcon, Users, MessageSquare, Star, BarChart2, Package, Edit, Trash2 } from "lucide-react";
// import Swal from 'sweetalert2';

// const TherapistHeader = ({ name, avatar }) => (
//   <div className="flex items-center space-x-6 p-6 bg-gradient-to-r from-[#46808B] to-[#5A9BAE] text-[#EEF6F9] rounded-lg shadow-lg">
//     <img src={avatar || "/api/placeholder/150/150"} alt="Therapist Avatar" className="w-24 h-24 rounded-full border-4 border-[#EEF6F9] shadow-md" />
//     <div>
//       <h1 className="text-3xl font-bold">{name || "Therapist Name"}</h1>
//       <p className="text-xl text-[#B9D9D6]">Professional Therapist</p>
//     </div>
//   </div>
// );

// const TabButton = ({ icon: Icon, label, isActive, onClick }) => (
//   <button 
//     className={`flex items-center space-x-2 px-6 py-3 rounded-lg transition-all duration-200 ${
//       isActive ? 'bg-[#46808B] text-[#EEF6F9] shadow-md' : 'bg-[#EEF6F9] text-gray-600 hover:bg-[#B9D9D6]'
//     }`}
//     onClick={onClick}
//   >
//     <Icon className="w-5 h-5" />
//     <span className="font-medium">{label}</span>
//   </button>
// );

// const Calendar = ({ selectedDate, onChange }) => {
//   const [currentMonth, setCurrentMonth] = useState(new Date());
  
//   const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();
//   const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1).getDay();
  
//   const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
//   const emptyDays = Array.from({ length: firstDayOfMonth }, (_, i) => i);
  
//   const months = [
//     "January", "February", "March", "April", "May", "June",
//     "July", "August", "September", "October", "November", "December"
//   ];
  
//   const weekDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  
//   const nextMonth = () => {
//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));
//   };
  
//   const prevMonth = () => {
//     const today = new Date();
//     const firstOfNextMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1);
//     if (firstOfNextMonth >= today) {
//       setCurrentMonth(firstOfNextMonth);
//     }
//   };
  
//   const isSelected = (day) => {
//     if (!selectedDate) return false;
//     return (
//       selectedDate.getDate() === day &&
//       selectedDate.getMonth() === currentMonth.getMonth() &&
//       selectedDate.getFullYear() === currentMonth.getFullYear()
//     );
//   };

//   const isDateDisabled = (day) => {
//     const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);
//     const today = new Date();
//     today.setHours(0, 0, 0, 0);
//     return date < today;
//   };
  
//   return (
//     <div className="bg-white rounded-lg shadow p-4">
//       <div className="flex justify-between items-center mb-4">
//         <button 
//           onClick={prevMonth} 
//           className={`text-[#46808B] p-1 ${
//             new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1) < new Date() 
//             ? 'opacity-50 cursor-not-allowed' 
//             : 'hover:text-[#5A9BAE]'
//           }`}
//         >
//           <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
//           </svg>
//         </button>
//         <h2 className="text-lg font-semibold text-[#46808B]">
//           {months[currentMonth.getMonth()]} {currentMonth.getFullYear()}
//         </h2>
//         <button onClick={nextMonth} className="text-[#46808B] hover:text-[#5A9BAE] p-1">
//           <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
//           </svg>
//         </button>
//       </div>
      
//       <div className="grid grid-cols-7 gap-1">
//         {weekDays.map(day => (
//           <div key={day} className="text-center text-sm font-semibold text-gray-600 mb-2">
//             {day}
//           </div>
//         ))}
        
//         {emptyDays.map(day => (
//           <div key={`empty-${day}`} className="h-10 w-10" />
//         ))}
        
//         {days.map(day => (
//           <div key={`day-${day}`} className="flex justify-center">
//             <button
//               onClick={() => {
//                 const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);
//                 if (!isDateDisabled(day)) {
//                   onChange(date);
//                 }
//               }}
//               disabled={isDateDisabled(day)}
//               className={`h-10 w-10 flex items-center justify-center rounded-full text-sm
//                 ${isSelected(day) 
//                   ? 'bg-[#46808B] text-white font-semibold' 
//                   : isDateDisabled(day)
//                     ? 'text-gray-300 cursor-not-allowed'
//                     : 'hover:bg-[#B9D9D6] text-gray-700'}`}
//             >
//               {day}
//             </button>
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// };

// const AppointmentTab = ({ appointments, setAppointments }) => {
//   const [selectedDate, setSelectedDate] = useState(null);
//   const [startTime, setStartTime] = useState("09:00");
//   const [endTime, setEndTime] = useState("10:00");
//   const [editingIndex, setEditingIndex] = useState(null);

//   const generateTimeSlots = () => {
//     return Array.from({ length: 48 }, (_, i) => {
//       const hour = Math.floor(i / 2).toString().padStart(2, '0');
//       const minute = (i % 2 === 0 ? '00' : '30');
//       return `${hour}:${minute}`;
//     });
//   };

//   const timeSlots = generateTimeSlots();

//   const isAppointmentExists = (date, start, end, excludeIndex = null) => {
//     return appointments.some((app, index) => {
//       if (excludeIndex !== null && index === excludeIndex) return false;
//       return app.date.toDateString() === date.toDateString() && 
//              ((start >= app.startTime && start < app.endTime) ||
//               (end > app.startTime && end <= app.endTime) ||
//               (start <= app.startTime && end >= app.endTime));
//     });
//   };

//   const handleAddAppointment = () => {
//     if (selectedDate && startTime && endTime) {
//       const today = new Date();
//       today.setHours(0, 0, 0, 0);

//       if (selectedDate < today) {
//         Swal.fire({
//           icon: 'error',
//           title: 'Invalid Date',
//           text: 'Cannot schedule appointments for past dates.',
//         });
//         return;
//       }

//       if (startTime >= endTime) {
//         Swal.fire({
//           icon: 'error',
//           title: 'Invalid Time',
//           text: 'Start time must be before end time.',
//         });
//         return;
//       }

//       const appointmentExists = isAppointmentExists(selectedDate, startTime, endTime, editingIndex);
//       if (appointmentExists) {
//         Swal.fire({
//           icon: 'error',
//           title: 'Time Slot Unavailable',
//           text: 'This appointment time overlaps with an existing appointment. Please choose a different time.',
//         });
//         return;
//       }

//       const newAppointment = {
//         date: selectedDate,
//         day: selectedDate.toLocaleDateString('en-US', { weekday: 'long' }),
//         month: selectedDate.toLocaleDateString('en-US', { month: 'long' }),
//         fullDate: selectedDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
//         startTime,
//         endTime
//       };

//       if (editingIndex !== null) {
//         const updatedAppointments = [...appointments];
//         updatedAppointments[editingIndex] = newAppointment;
//         setAppointments(updatedAppointments);
//         setEditingIndex(null);
//       } else {
//         setAppointments([...appointments, newAppointment]);
//       }
//       setSelectedDate(null);
//       setStartTime("09:00");
//       setEndTime("10:00");
//     }
//   };

//   const handleEdit = (index) => {
//     const appointment = appointments[index];
//     setSelectedDate(new Date(appointment.date));
//     setStartTime(appointment.startTime);
//     setEndTime(appointment.endTime);
//     setEditingIndex(index);
//   };

//   const handleDelete = (index) => {
//     setAppointments(appointments.filter((_, i) => i !== index));
//   };

//   return (
//     <div className="space-y-6">
//       <div className="bg-[#EEF6F9] rounded-lg shadow-md">
//         <div className="p-6">
//           <h3 className="text-xl font-semibold mb-4 text-[#46808B]">Schedule Appointment</h3>
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//             <Calendar selectedDate={selectedDate} onChange={setSelectedDate} />
//             <div className="space-y-4">
//               <div>
//                 <label className="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
//                 <select
//                   value={startTime}
//                   onChange={(e) => setStartTime(e.target.value)}
//                   className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#46808B]"
//                 >
//                   {timeSlots.map((time) => (
//                     <option key={time} value={time}>{time}</option>
//                   ))}
//                 </select>
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700 mb-1">End Time</label>
//                 <select
//                   value={endTime}
//                   onChange={(e) => setEndTime(e.target.value)}
//                   className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#46808B]"
//                 >
//                   {timeSlots.map((time) => (
//                     <option key={time} value={time}>{time}</option>
//                   ))}
//                 </select>
//               </div>
//               <button
//                 onClick={handleAddAppointment}
//                 className="w-full bg-[#46808B] hover:bg-[#5A9BAE] text-white py-2 px-4 rounded-md transition-colors duration-200"
//               >
//                 {editingIndex !== null ? "Update Appointment" : "Add Appointment"}
//               </button>
//             </div>
//           </div>
//         </div>
//       </div>

//       <div className="bg-[#EEF6F9] rounded-lg shadow-md">
//         <div className="p-6">
//           <h3 className="text-xl font-semibold mb-4 text-[#46808B]">Scheduled Appointments</h3>
//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//             {appointments.map((app, index) => (
//               <div key={index} className="bg-white rounded-lg shadow p-4">
//                 <div className="flex justify-between items-start">
//                   <div>
//                     <p className="font-semibold text-lg text-[#46808B]">{app.day}</p>
//                     <p className="text-gray-600">{app.fullDate}</p>
//                     <p className="text-gray-600">{app.startTime} - {app.endTime}</p>
//                   </div>
//                   <div className="flex gap-2">
//                     <button onClick={() => handleEdit(index)} className="text-[#46808B] hover:text-[#5A9BAE]">
//                       <Edit className="h-4 w-4" />
//                     </button>
//                     <button onClick={() => handleDelete(index)} className="text-red-500 hover:text-red-600">
//                       <Trash2 className="h-4 w-4" />
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };
// const ServicesTab = ({ services, setServices }) => {
//   const [newService, setNewService] = useState({ name: "", price: "", description: "" });
//   const [editingIndex, setEditingIndex] = useState(null);

//   const handleAddService = () => {
//     if (newService.name && newService.price) {
//       if (editingIndex !== null) {
//         const updatedServices = [...services];
//         updatedServices[editingIndex] = newService;
//         setServices(updatedServices);
//         setEditingIndex(null);
//       } else {
//         setServices([...services, newService]);
//       }
//       setNewService({ name: "", price: "", description: "" });
//     }
//   };

//   const handleEdit = (index) => {
//     setEditingIndex(index);
//     setNewService(services[index]);
//   };

//   const handleDelete = (index) => {
//     setServices(services.filter((_, i) => i !== index));
//   };

//   return (
//     <div className="space-y-6">
//       <div className="bg-[#EEF6F9] rounded-lg shadow-md">
//         <div className="p-6">
//           <h3 className="text-xl font-semibold mb-4 text-[#46808B]">Add/Edit Service</h3>
//           <div className="space-y-4">
//             <input
//               type="text"
//               value={newService.name}
//               onChange={(e) => setNewService({ ...newService, name: e.target.value })}
//               placeholder="Service Name"
//               className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#46808B]"
//             />
//             <input
//               type="number"
//               value={newService.price}
//               onChange={(e) => setNewService({ ...newService, price: e.target.value })}
//               placeholder="Price"
//               className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#46808B]"
//             />
//             <textarea
//               value={newService.description}
//               onChange={(e) => setNewService({ ...newService, description: e.target.value })}
//               placeholder="Service Description"
//               className="w-full p-2 border border-gray-300 rounded-md h-24 focus:outline-none focus:ring-2 focus:ring-[#46808B]"
//             />
//             <button
//               onClick={handleAddService}
//               className="w-full bg-[#46808B] hover:bg-[#5A9BAE] text-white py-2 px-4 rounded-md transition-colors duration-200"
//             >
//               {editingIndex !== null ? "Update Service" : "Add Service"}
//             </button>
//           </div>
//         </div>
//       </div>

//       <div className="bg-[#EEF6F9] rounded-lg shadow-md">
//         <div className="p-6">
//           <h3 className="text-xl font-semibold mb-4 text-[#46808B]">Services</h3>
//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//             {services.map((service, index) => (
//               <div key={index} className="bg-white rounded-lg shadow p-4">
//                 <div className="flex justify-between items-start">
//                   <div>
//                     <p className="font-semibold text-lg text-[#46808B]">{service.name}</p>
//                     <p className="text-gray-600">${service.price}</p>
//                     <p className="text-gray-600 mt-2">{service.description}</p>
//                   </div>
//                   <div className="flex gap-2">
//                     <button onClick={() => handleEdit(index)} className="text-[#46808B] hover:text-[#5A9BAE]">
//                       <Edit className="h-4 w-4" />
//                     </button>
//                     <button onClick={() => handleDelete(index)} className="text-red-500 hover:text-red-600">
//                       <Trash2 className="h-4 w-4" />
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// const ClientsTab = () => (
//   <div className="bg-[#EEF6F9] p-6 rounded-lg shadow-md">
//     <h2 className="text-2xl font-bold mb-4 text-[#46808B]">Clients</h2>
//     <p className="text-gray-600">Clients management interface goes here.</p>
//   </div>
// );

// const ChatTab = () => (
//   <div className="bg-[#EEF6F9] p-6 rounded-lg shadow-md">
//     <h2 className="text-2xl font-bold mb-4 text-[#46808B]">Chat</h2>
//     <p className="text-gray-600">Chat interface goes here.</p>
//   </div>
// );

// const ReviewsTab = () => (
//   <div className="bg-[#EEF6F9] p-6 rounded-lg shadow-md">
//     <h2 className="text-2xl font-bold mb-4 text-[#46808B]">Reviews</h2>
//     <p className="text-gray-600">Reviews management interface goes here.</p>
//   </div>
// );

// const AnalyticsTab = () => (
//   <div className="bg-[#EEF6F9] p-6 rounded-lg shadow-md">
//     <h2 className="text-2xl font-bold mb-4 text-[#46808B]">Analytics</h2>
//     <p className="text-gray-600">Analytics dashboard goes here.</p>
//   </div>
// );

// const TherapistDashboard = ({ name, avatar }) => {
//   const [activeTab, setActiveTab] = useState("appointments");
//   const [appointments, setAppointments] = useState([]);
//   const [services, setServices] = useState([]);

//   const tabComponents = {
//     appointments: (
//       <AppointmentTab appointments={appointments} setAppointments={setAppointments} />
//     ),
//     services: <ServicesTab services={services} setServices={setServices} />,
//     clients: <ClientsTab />,
//     chat: <ChatTab />,
//     reviews: <ReviewsTab />,
//     analytics: <AnalyticsTab />,
//   };

//   const tabIcons = {
//     appointments: CalendarIcon,
//     services: Package,
//     clients: Users,
//     chat: MessageSquare,
//     reviews: Star,
//     analytics: BarChart2,
//   };

//   return (
//     <div className="min-h-screen bg-[#prime-white]">
//       <div className="container mx-auto p-6 space-y-6">
//         <TherapistHeader name={name} avatar={avatar} />
        
//         <div className="bg-white rounded-lg shadow-md p-2 flex space-x-2 overflow-x-auto">
//           {Object.keys(tabComponents).map((tab) => {
//             const Icon = tabIcons[tab];
//             return (
//               <TabButton
//                 key={tab}
//                 icon={Icon}
//                 label={tab.charAt(0).toUpperCase() + tab.slice(1)}
//                 isActive={activeTab === tab}
//                 onClick={() => setActiveTab(tab)}
//               />
//             );
//           })}
//         </div>

//         <div className="mt-6">
//           {tabComponents[activeTab]}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default TherapistDashboard;